version: '3.6'

services:
  server:
    restart: always
    build:
      context: server
      dockerfile: docker-server.txt
    expose:
      - "5000"
    ports:
      - "5000:5000"
    networks:
      - db_net
      - web_net
      - lab_net
    environment:
      KRAKEN_PORT: "5000"
      DB_URL: "postgresql://kraken:kk123@postgres:5432/kraken"
      REDIS_HOST: "redis"
      KRAKEN_ELASTICSEARCH: "http://elastic:changeme@elasticsearch"
      KRAKEN_LOGSTASH: "logstash"
    depends_on:
      - postgres
      - planner
      - celery

  scheduler:
    restart: always
    build:
      context: server
      dockerfile: docker-scheduler.txt
    networks:
      - db_net
    environment:
      DB_URL: "postgresql://kraken:kk123@postgres:5432/kraken"
      KRAKEN_LOGSTASH: "logstash"
    depends_on:
      - postgres

  planner:
    restart: always
    build:
      context: server
      dockerfile: docker-planner.txt
    networks:
      - db_net
    environment:
      REDIS_HOST: "redis"
      DB_URL: "postgresql://kraken:kk123@postgres:5432/kraken"
      KRAKEN_LOGSTASH: "logstash"
    depends_on:
      - celery

  celery:
    restart: always
    build:
      context: server
      dockerfile: docker-celery.txt
    networks:
      - db_net
    environment:
      REDIS_HOST: "redis"
      DB_URL: "postgresql://kraken:kk123@postgres:5432/kraken"
      KRAKEN_LOGSTASH: "logstash"
    depends_on:
      - postgres
      - redis

  agent:
    restart: always
    build:
      context: agent
      dockerfile: docker-agent.txt
    networks:
      - lab_net
    environment:
      SERVER: "server"
      KRAKEN_LOGSTASH: "logstash"
    depends_on:
      - server

  ui:
    build:
      context: ui
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - web_net
    environment:
      API_HOST: server
      API_PORT: 5000
    depends_on:
      - server

  postgres:
    image: postgres:11
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - db_net
    environment:
      POSTGRES_USER: kraken
      POSTGRES_PASSWORD: kk123
      POSTGRES_DB: kraken

  redis:
    image: "redis:alpine"
    networks:
      - db_net

# ELK
  elasticsearch:
    build:
      context: docker-elk/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker-elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
    networks:
      - db_net

  logstash:
    build:
      context: docker-elk/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker-elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker-elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5959:5959/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - db_net
      - lab_net
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: docker-elk/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker-elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - db_net
    depends_on:
      - elasticsearch



volumes:
  db-data:
  elasticsearch:

networks:
  db_net:
    driver: bridge
  web_net:
    driver: bridge
  lab_net:
    driver: bridge
